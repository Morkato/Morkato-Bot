// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"

  url = env("DATABASE_URL")
}

enum ArtType {
  RESPIRATION
  KEKKIJUTSU
  FIGHTING_STYLE
}

enum PlayerBreed {
  HUMAN
  ONI
  HYBRID
}

enum PlayerRank {
  F
  E
  D
  C
  B
  A
  AA
  AAA
  AAAA
  S
  SS
  SSS
  SSSS
}

enum DialogChoose {
  PLAYER
  NPC
}

model Guild {
  id String @id

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  arts        Art[]
  attacks     Attack[]
  players     Player[]
  quests      Quest[]
  DialogQuest DialogQuest[]
  arms        Arm[]

  @@map("guilds")
}

model Art {
  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  name String
  id   String
  type ArtType

  guild_id String

  embed_title       String?
  embed_description String?
  embed_url         String?

  attacks Attack[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@id([id, guild_id])
  @@map("arts")
}

model Attack {
  name String
  id   String

  guild   Guild    @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  art     Art?     @relation(fields: [art_id, guild_id], references: [id, guild_id], onDelete: Cascade, onUpdate: Cascade)
  attacks Attack[] @relation("ParentAttack")

  guild_id String
  art_id   String?
  arm_id   String?

  parent Attack? @relation("ParentAttack", fields: [parent_id, guild_id], references: [id, guild_id])

  parent_id String?

  required_exp Int @default(0)

  embed_title       String?
  embed_description String?
  embed_url         String?

  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  Arm         Arm?     @relation(fields: [armGuild_id, armId], references: [guild_id, id])
  armGuild_id String?
  armId       String?

  @@id([guild_id, id])
  @@map("attacks")
}

model Player {
  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  name        String
  credibility Int    @default(0)

  guild_id String
  id       String
  breed    PlayerBreed

  cash Int        @default(0)
  rank PlayerRank @default(F)

  life   Int @default(0)
  blood  Int @default(0)
  breath Int @default(0)
  exp    Int @default(0)

  appearance String?

  @@id([guild_id, id])
  @@map("players")
}

model Quest {
  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  id       String
  guild_id String

  name String

  required_breed   PlayerBreed?
  required_rank    PlayerRank
  allowed_channels String[]
  required_exp     Int

  title       String?
  description String?
  url         String?
  icon        String?

  dialogs DialogQuest[]

  @@id([guild_id, id])
  @@map("quests")
}

model DialogQuest {
  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  quest Quest @relation(fields: [guild_id, quest_id], references: [guild_id, id], onDelete: Cascade)

  id       String
  guild_id String
  quest_id String

  positon Int

  contents String[]
  choose   DialogChoose

  @@id([guild_id, quest_id, id])
  @@unique([guild_id, quest_id, positon], map: "from_position")
  @@map("dialog_quests")
}

model Arm {
  guild Guild @relation(fields: [guild_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  guild_id String
  id       String

  name String
  role String?

  embed_title       String?
  embed_description String?
  embed_url         String?

  attacks Attack[]

  @@id([guild_id, id])
  @@map("arms")
}
