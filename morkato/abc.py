from typing import (
  runtime_checkable,
  Optional,
  Iterator,
  Protocol,
  TypeVar,
  List
)

T = TypeVar('T', bound='Snowflake')
@runtime_checkable
class Snowflake(Protocol):
  id: int
@runtime_checkable
class UnresolvedSnowflakeList(Protocol[T]):
  def __iter__(self) -> Iterator[T]: ...
  def __len__(self) -> int: ...
  def order(self) -> List[T]: ...
  def already_loaded() -> bool: ...
  async def resolve() -> None: ...
  def add(self, object: T, /) -> None: ...
  def remove(self, object: Snowflake, /) -> Optional[T]: ...
  def get(self, id: int) -> Optional[T]: ...